using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Xunit;

namespace ETL.WorkerD.Gen.Tests;

public class PgCopySourceGeneratorTests
{
    private const string ModelClassText = @"
using ETL.PgLoadGen;

namespace TestNamespace;

[PgLoadModel(""public.target_table2"")]
public class LoadModel
{
    [PgLoadKey]
    public required string prop2 { get; set; }
    [PgLoadKey]
    public required string prop3 { get; set; }
    public int? prop4 { get; set; }
    public required int prop5 { get; set; }
    public string? prop6 { get; set; }
    public required DateTime prop7 { get; set; }
    public DateTime? prop8 { get; set; }
}";

    private const string ExpectedGeneratedClassText = 
""""
// <auto-generated/>

using System;
using System.Collections.Frozen;
using Npgsql;
using NpgsqlTypes;

namespace TestNamespace;

public class LoadModelCopier : ETL.PgLoadGen.IPgCopier<LoadModel>
{
    public string CreateTempTableSql =>
        "CREATE TEMP TABLE tmpt AS SELECT prop2, prop3, prop4, prop5, prop6, prop7, prop8 FROM public.target_table2 LIMIT 0 WITH NO DATA;";
    public string CopySql => "COPY tmpt (prop2, prop3, prop4, prop5, prop6, prop7, prop8) FROM STDIN (FORMAT BINARY);";
    public string UpsertSql =>
        $"""
        INSERT INTO public.target_table2 (prop2, prop3, prop4, prop5, prop6, prop7, prop8)
        SELECT prop2, prop3, prop4, prop5, prop6, prop7, prop8
        FROM tmpt
        ON CONFLICT (prop2, prop3) 
        DO UPDATE SET prop4 = excluded.prop4, prop5 = excluded.prop5, prop6 = excluded.prop6, prop7 = excluded.prop7, prop8 = excluded.prop8;
        """;
    public async Task WriteAsync(NpgsqlBinaryImporter writer, LoadModel row, CancellationToken ct)
    {
        await writer.StartRowAsync(ct);
        await writer.WriteAsync(row.prop2, NpgsqlDbType.Varchar, ct);
        await writer.WriteAsync(row.prop3, NpgsqlDbType.Varchar, ct);
        await writer.WriteAsync(row.prop4, NpgsqlDbType.Integer, ct);
        await writer.WriteAsync(row.prop5, NpgsqlDbType.Integer, ct);
        await writer.WriteAsync(row.prop6, NpgsqlDbType.Varchar, ct);
        await writer.WriteAsync(row.prop7, NpgsqlDbType.Timestamp, ct);
        await writer.WriteAsync(row.prop8, NpgsqlDbType.Timestamp, ct);
    }
}

"""";

    [Fact]
    public void GenerateReportMethod()
    {
        // Create an instance of the source generator.
        var generator = new PgCopySourceGenerator();

        // Source generators should be tested using 'GeneratorDriver'.
        var driver = CSharpGeneratorDriver.Create(generator);

        // We need to create a compilation with the required source code.
        var compilation = CSharpCompilation.Create(nameof(PgCopySourceGeneratorTests),
            [CSharpSyntaxTree.ParseText(ModelClassText)],
            [
                // To support 'System.Attribute' inheritance, add reference to 'System.Private.CoreLib'.
                MetadataReference.CreateFromFile(typeof(object).Assembly.Location)
            ]);

        // Run generators and retrieve all results.
        var runResult = driver.RunGenerators(compilation).GetRunResult();

        // All generated files can be found in 'RunResults.GeneratedTrees'.
        var generatedFileSyntax = runResult.GeneratedTrees.Single(t => t.FilePath.EndsWith("LoadModelCopier.g.cs"));

        // Complex generators should be tested using text comparison.
        Assert.Equal(ExpectedGeneratedClassText, generatedFileSyntax.GetText().ToString(),
            ignoreLineEndingDifferences: true);
    }
}